service: minutes

frameworkVersion: "=1.74.1"

package:
  individually: true
  exclude:
   - ./**

custom:
  mainTableArn: ${ssm:/dynamodb/minutes/main_table_arn~true}
  mainTableName: ${ssm:/dynamodb/minutes/main_table_name~true}
  webpack:
    packager: yarn
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
  serverless-iam-roles-per-function:
    defaultInherit: true
  prune:
    automatic: true
    number: 3
  <<: &authorizer
    name: RestAuth
    managedExternally: false
    resultTtlInSeconds: 300
    identitySource: method.request.header.Authorization
    identityValidationExpression: ^Bearer [-0-9a-zA-Z\._]*$
    type: token

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'eu-central-1'}
  stage: ${opt:stage, 'dev'}

  logs:
    websocket:
      level: INFO

  tracing:
    apiGateway: true
    lambda: true

  stackTags:
    Service: ${self:service}
    Stage: ${self:provider.stage}
    Region: ${self:provider.region}
    Version: ${file(./package.json):version}
    Project: minutes

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - ${self:custom.mainTableArn}
        - Fn::Join:
          - "/"
          -
            - ${self:custom.mainTableArn}
            - "index/*"


functions:
  RestAuth:
    handler: src/handlers/authorizer/restHandler.handle
    environment:
      ISS: ${ssm:/cognito-user-pool/minutes/iss~true}

  UserRegister:
    handler: src/handlers/cognito/postConfirmation.handle
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}
    events:
      - cognitoUserPool:
          pool: minutes_user_pool
          trigger: PostConfirmation
          existing: true

  WebsocketAuth:
    handler: src/handlers/authorizer/wsHandler.handle
    environment:
      ISS: ${ssm:/cognito-user-pool/minutes/iss~true}

  WebsocketConnect:
    handler: src/handlers/websockets/connect.handle
    events:
      - websocket: 
          route: $connect
          authorizer: 
            name: WebsocketAuth
            identitySource:
              - 'route.request.querystring.Auth'
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}
  
  WebsocketDisconnect:
    handler: src/handlers/websockets/disconnect.handle
    events:
      - websocket: 
          route: $disconnect
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}

  CreateMeeting:
    handler: src/modules/meetings/usecase/createMeeting/index.handler
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}
    events:
      - http:
          path: meetings
          method: post
          authorizer: *authorizer
  
  JoinMeeting:
    handler: src/modules/meetings/usecase/joinMeeting/index.handler
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}
    events:
      - http:
          path: meetings/{id}/attendance
          method: post
          authorizer: *authorizer
  
  LeaveMeeting:
    handler: src/modules/meetings/usecase/leaveMeeting/index.handler
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}
    events:
      - http:
          path: meetings/{id}/attendance
          method: delete
          authorizer: *authorizer
  
  GetMeeting:
    handler: src/modules/meetings/usecase/getMeeting/index.handler
    environment:
      MAIN_TABLE_NAME: ${self:custom.mainTableName}
    events:
      - http:
          path: meetings/{id}
          method: get
          authorizer: *authorizer